{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\\\uC0AC\\uC5C5\\uAD00\\uB828\\uC11C\\uB958\\\\pn\\uAC1C\\uBC1C\\uC774\\uB825\\\\\\uCC28\\uC8FC\\uC778_20250609\\\\\\uCC28\\uC8FC\\uC778_front\\\\src\\\\component\\\\InputFileBox.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useId } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { clickImg, regFileDoc, regFileImage, regFilePdf, regFileExcel } from '../utils/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function InputFileBox(props) {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    type,\n    style,\n    name,\n    idx,\n    setValue,\n    setExt,\n    setFileName,\n    defaultFileName,\n    onChange,\n    valid,\n    readOnly,\n    children,\n    setError\n  } = props;\n  const fileInput = useRef();\n  const [file_name, setfile_name] = useState(\"\");\n  const id = useId();\n  useEffect(() => {\n    setfile_name(defaultFileName);\n  }, [defaultFileName]);\n  const handleChange = ({\n    file\n  }) => {\n    var reg = \"\";\n    var msg = \"\";\n    if (valid === 'image') {\n      reg = regFileImage;\n      msg = \"이미지\";\n    } else if (valid === 'doc') {\n      reg = regFileDoc;\n      msg = \"문서\";\n    } else if (valid === 'pdf') {\n      reg = regFilePdf;\n      msg = \"문서\";\n    } else if (valid === 'excel') {\n      reg = regFileExcel;\n      msg = \"문서\";\n    }\n    if (file.name.toLowerCase().match(reg)) {\n      // console.log(file);\n      setfile_name(file.name);\n      if (setFileName) setFileName(file.name);\n      let reader = new FileReader();\n      reader.onload = function () {\n        let fn = file.name.split('.');\n        if (onChange) {\n          onChange(idx, name, {\n            base: reader.result,\n            ext: fn[fn.length - 1]\n          });\n        } else {\n          setValue({\n            base: reader.result,\n            ext: fn[fn.length - 1]\n          });\n          if (setExt) {\n            setExt(fn[fn.length - 1]);\n          }\n        }\n      };\n      reader.readAsDataURL(file);\n    } else {\n      fileInput.current.value = \"\";\n      if (!onChange) {\n        setValue(\"\");\n        setfile_name(\"\");\n        if (setFileName) setFileName(\"\");\n        if (setExt) setExt(\"\");\n      }\n      if (setError) setError(\"파일 형식이 맞지않습니다.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input_box\",\n    style: style,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"file_label_btn\",\n      htmlFor: id,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: fileInput,\n      type: type,\n      name: name,\n      id: id,\n      onChange: ({\n        target: {\n          files\n        }\n      }) => {\n        if (files.length) {\n          handleChange({\n            file: files[0]\n          });\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n}\n_s(InputFileBox, \"ezjDT58BXWuw57vwa7xbGG7ZM1I=\", false, function () {\n  return [useDispatch, useId];\n});\n_c = InputFileBox;\nvar _c;\n$RefreshReg$(_c, \"InputFileBox\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useId","useDispatch","useSelector","clickImg","regFileDoc","regFileImage","regFilePdf","regFileExcel","jsxDEV","_jsxDEV","InputFileBox","props","_s","dispatch","type","style","name","idx","setValue","setExt","setFileName","defaultFileName","onChange","valid","readOnly","children","setError","fileInput","file_name","setfile_name","id","handleChange","file","reg","msg","toLowerCase","match","reader","FileReader","onload","fn","split","base","result","ext","length","readAsDataURL","current","value","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","ref","target","files","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/사업관련서류/pn개발이력/차주인_20250609/차주인_front/src/component/InputFileBox.js"],"sourcesContent":["import React, { useEffect, useState, useRef, useId } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { clickImg, regFileDoc, regFileImage, regFilePdf, regFileExcel } from '../utils/utils';\n\nexport default function InputFileBox(props) {\n\n    const dispatch = useDispatch();\n\n    const {\n        type,\n        style,\n        name,\n        idx,\n        setValue,\n        setExt,\n        setFileName,\n        defaultFileName,\n        onChange,\n        valid,\n        readOnly,\n        children,\n        setError,\n    } = props;\n\n    const fileInput = useRef();\n    const [file_name, setfile_name] = useState(\"\");\n\n    const id = useId();\n\n    useEffect(() => {\n\n        setfile_name(defaultFileName)\n\n    }, [defaultFileName]);\n\n    const handleChange = ({ file }) => {\n        var reg = \"\";\n        var msg = \"\";\n\n        if (valid === 'image') {\n            reg = regFileImage;\n            msg = \"이미지\";\n        } else if (valid === 'doc') {\n            reg = regFileDoc;\n            msg = \"문서\";\n        } else if (valid === 'pdf') {\n            reg = regFilePdf;\n            msg = \"문서\";\n        } else if (valid === 'excel') {\n            reg = regFileExcel;\n            msg = \"문서\";\n        }\n\n        if (file.name.toLowerCase().match(reg)) {\n            // console.log(file);\n            setfile_name(file.name);\n\n            if (setFileName) setFileName(file.name);\n\n            let reader = new FileReader();\n            reader.onload = function () {\n\n                let fn = file.name.split('.');\n\n                if (onChange) {\n                    onChange(idx, name, {\n                        base: reader.result,\n                        ext: fn[fn.length - 1]\n                    });\n\n                } else {\n                    setValue({\n                        base: reader.result,\n                        ext: fn[fn.length - 1]\n                    });\n\n                    if (setExt) {\n                        setExt(fn[fn.length - 1]);\n                    }\n                }\n\n            };\n            reader.readAsDataURL(file);\n\n        } else {\n            fileInput.current.value = \"\";\n\n            if (!onChange) {\n                setValue(\"\");\n                setfile_name(\"\");\n\n                if (setFileName) setFileName(\"\");\n                if (setExt) setExt(\"\");\n            }\n\n            if (setError) setError(\"파일 형식이 맞지않습니다.\");\n        }\n\n    };\n\n    return (\n        <div className=\"input_box\" style={style}>\n\n            <label className={\"file_label_btn\"} htmlFor={id}>\n                {children}\n            </label>\n\n            <input\n                ref={fileInput}\n                type={type}\n                name={name}\n                id={id}\n                onChange={({ target: { files } }) => {\n                    if (files.length) {\n                        handleChange({\n                            file: files[0]\n                        })\n                    }\n                }} />\n        </div >\n    )\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}