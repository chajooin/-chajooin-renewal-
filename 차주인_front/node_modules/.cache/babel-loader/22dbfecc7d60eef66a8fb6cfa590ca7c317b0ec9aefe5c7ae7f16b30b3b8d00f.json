{"ast":null,"code":"import React,{useEffect,useState,useRef}from'react';import{useDispatch,useSelector}from'react-redux';import{open,close}from'../redux/popupSlice';import consts from'../libs/consts';import{regFileDoc,regFileImage}from'../utils/utils';import{DefaultImg}from'./DefaultImg';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function InputFileMulti(props){const dispatch=useDispatch();const{className,placeholder,type,name,maxlength=10,value,setValue,valid,label,error,success,onDelete,readOnly,onBlur,withButton,withButtonPress,multiple}=props;const fileInput=useRef();const[detailImageUrl,setDetailImageUrl]=useState([]);const handleChange=async e=>{var files=e.target.files;// console.log(files);\nif(files.length<1)return;if(files.length>maxlength){dispatch(open({content:\"한번에 \"+maxlength+\"개까지 등록 가능합니다.\",onCancelPress:false,titleviewer:false,button:\"확인\",onPress:()=>{dispatch(close());}}));return;}// console.log(\"이미지 개수: \", (value.length + files.length))\nif(value.length+files.length>10){dispatch(open({content:\"이미지 최대 갯수는 10개 입니다.\",onCancelPress:false,titleviewer:false,button:\"확인\",onPress:()=>{dispatch(close());}}));return;}var reg=\"\";var msg=\"\";var file_arr=[];var file_url_arr=[];var cker=true;if(valid==='image'){reg=regFileDoc;msg=\"이미지\";}else if(valid==='doc'){reg=regFileImage;msg=\"문서\";}for(var i=0;i<files.length;i++){var file=files[i];if(!file.name.toLowerCase().match(reg)){//fileInput.current.value = \"\";\n//setValue([]);\n//setDetailImageUrl([]);\ndispatch(open({message:msg+\" 파일만 등록 가능합니다.\"}));cker=false;return false;}}if(cker){let files_url=Array.from(files).map(file=>{let reader=new FileReader();// Create a new promise\nreturn new Promise(resolve=>{let fn=file.name.split('.');// Resolve the promise after reading file\nreader.onload=()=>{resolve({ext:fn[fn.length-1],base:reader.result});};// Reade the file as a text\nreader.readAsDataURL(file);});});let res=await Promise.all(files_url);setValue([...value,...res]);}};// set file reader function\nconst fileDelete=i=>{//fileInput.current.value = \"\";\n//console.log(i);\nlet row=value===null||value===void 0?void 0:value.find((item,index)=>index===i);setValue(value===null||value===void 0?void 0:value.filter((item,index)=>index!==i));if(onDelete){if(row!==null&&row!==void 0&&row.file_path)onDelete(prev=>[...prev,row===null||row===void 0?void 0:row.file_path]);else if(typeof row==\"string\")onDelete(row);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"input_box\",children:[label&&/*#__PURE__*/_jsx(\"p\",{className:\"input_label\",children:label}),/*#__PURE__*/_jsxs(\"div\",{className:\"input_section_multi\",children:[/*#__PURE__*/_jsxs(\"label\",{className:\"input_file_label_multi\",htmlFor:name,children:[/*#__PURE__*/_jsx(\"p\",{className:\"bolds fontsize12\",children:value.length}),\"/\",maxlength]}),/*#__PURE__*/_jsx(\"input\",{ref:fileInput,type:type,name:name,id:name,onChange:handleChange,multiple:true}),value===null||value===void 0?void 0:value.map((x,i)=>{let imgUrl=\"\";if(x!==null&&x!==void 0&&x.file_path){imgUrl=consts.s3url+(x===null||x===void 0?void 0:x.file_path);}else if(typeof x==\"string\"){imgUrl=consts.s3url+x;}else{imgUrl=x===null||x===void 0?void 0:x.base;}return/*#__PURE__*/_jsxs(\"div\",{className:\"input_multi_preview\",children:[/*#__PURE__*/_jsx(\"img\",{src:imgUrl,onError:DefaultImg}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"img_delete_btn\",onClick:()=>fileDelete(i)})]},i);})]}),error&&/*#__PURE__*/_jsx(\"p\",{className:\"input_error\",children:error}),success&&/*#__PURE__*/_jsx(\"p\",{className:\"input_success\",children:success})]});}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}